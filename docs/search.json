[
  {
    "objectID": "hands-on.html",
    "href": "hands-on.html",
    "title": "hands-on",
    "section": "",
    "text": "- 과거: 개념들을 배우고, 활용을 잘하면 코딩을 잘하는 것이다.\n\n제 생각: 개념을 활용하여 코딩을 잘하는건 많은 연습과 센스가 필요했음.\n\n개념1 – 숫자의 저장 및 계산\n\na=1\na\n\n1\n\n\n\nb=2\nb\n\n2\n\n\n\na+b\n\n3\n\n\n개념2 – 문자의 저장 및 계산\n\na = '이재명'\n\n\nb = '대통령'\n\n\na+b\n\n'이재명대통령'\n\n\n\na*2\n\n'이재명이재명'\n\n\n\nb*2\n\n'대통령대통령'\n\n\n\n(a+b)*2\n\n'이재명대통령이재명대통령'\n\n\n개념3 – 숫자의 문자화, 문자의 숫자화 (형태변환 )\n\na = 2025\na\n\n2025\n\n\n\na*2\n\n4050\n\n\n\na = str(a)\na # 문자같은데?\n\n'2025'\n\n\n\na*2 # 문자\n\n'20252025'\n\n\n개념4 – replace (저장된 타입이 문자일 경우 쓸 수 있는 특별한 기능)\n\ns = 'abc'\ns\n\n'abc'\n\n\n\ns.replace('b','B')\n\n'aBc'\n\n\n개념5 – 리스트 = “숫자, 문자를 여러개 남을 수 있는 그릇”\n\nx = [1,2,'a',3]\nx\n\n[1, 2, 'a', 3]\n\n\n\nx[0]*2\n\n2\n\n\n\nx[1]*2\n\n4\n\n\n\nx[2]*2\n\n'aa'\n\n\n\nx[3]*2\n\n6\n\n\n개념6 – 리스트의 원소 추가\n(예시1)\n\nx = [1,2,'a',3]\nx\n\n[1, 2, 'a', 3]\n\n\n\nx.append('b')\n\n\nx\n\n[1, 2, 'a', 3, 'b']\n\n\n(예시2)\n\nx = [] \nx\n\n[]\n\n\n\nx.append(1)\nx\n\n[1]\n\n\n\nx.append(2)\nx\n\n[1, 2]\n\n\n(예시3)\n\nx=[]\nx\n\n[]\n\n\n아래의 코드를 3번실행해보자.\n\nx.append(1)\nx.append(2)\n\nx에는 뭐가 있을까?\n개념7 – for문 (리스트와 같은 iterable객체의 원소를 반복하여 호출하는 테크닉)\n(예시1)\n\nx = [1,2,'a',3]\ny = []\n\n\nfor xi in x: \n    y.append(xi)\n\n\ny\n\n[1, 2, 'a', 3]\n\n\n(예시2)\n\nx = [1,2,'a',3]\ny = []\n\n\nfor xi in x: \n    y.append(xi*2)\n\n\ny\n\n[2, 4, 'aa', 6]\n\n\n문제1 – yyyy/mm/dd 타입을 yyyy-mm-dd 타입으로 변환하기\n아래와 같은 리스트가 있다.\n\nyear = ['2022/09/21','2022/10/30','2022/12/25','2023/01/01','2023/01/31','2023/03/20']\nyear\n\n['2022/09/21',\n '2022/10/30',\n '2022/12/25',\n '2023/01/01',\n '2023/01/31',\n '2023/03/20']\n\n\n날짜를 아래와 같은 형식으로 바꾸는 코드를 제시하라.\n\n['2022-09-21','2022-10-30','2022-12-25','2023-01-01','2023-01-31','2023-03-20']\n\n['2022-09-21',\n '2022-10-30',\n '2022-12-25',\n '2023-01-01',\n '2023-01-31',\n '2023-03-20']\n\n\n(풀이) – 해보세요\n개념8 – 문자열들로 이루어진 리스트의 원소를 이어주는 테크닉 (join)\n\nx = ['2022','01','31']\nx\n\n['2022', '01', '31']\n\n\n\nx[0]+'-'+x[1]+'-'+x[2]\n\n'2022-01-31'\n\n\n\n'-'.join(x) # '-'를 이용하여 x의 각 원소를 이어라\n\n'2022-01-31'\n\n\n개념9 – 문자열을 특정기호를 기준으로 분리하여 리스트로 만들기\n(예시1)\n\ny = '2022-01-31'\ny\n\n'2022-01-31'\n\n\n\ny.split('-')\n\n['2022', '01', '31']\n\n\n(예시2)\n\ny\n\n'2022-01-31'\n\n\n\nz = y.split('-')\nz\n\n['2022', '01', '31']\n\n\n\n'-'.join(z)\n\n'2022-01-31'\n\n\n문제2 – 기차만들기\n아래의 특수문자를 이용하여\n\nb = '■'\nb\n\n'■'\n\n\n다음과 같은 기차를 만들어보자.\n\n'■-■-■-■-■---■-■-■-■-■---■-■-■-■-■'\n\n'■-■-■-■-■---■-■-■-■-■---■-■-■-■-■'\n\n\n(풀이)\n개념10 – 리스트안의 리스트 (원소로 리스트를 가지는 리스트)\n\nx = [1,2]\ny = [3,4,5]\nlst = [x,y]\n\n\nlst[0]\n\n[1, 2]\n\n\n\nlst[0][0]\n\n1\n\n\n\nlst[0][1]\n\n2\n\n\n\nlst[1]\n\n[3, 4, 5]\n\n\n\nlst[1][0]\n\n3\n\n\n\nlst[1][1]\n\n4\n\n\n\nlst[1][2]\n\n5\n\n\n개념11 – 함수\n\ndef f(x):\n    y = x*3\n    return y \n\n\nf(1)\n\n3\n\n\n\nf('a')\n\n'aaa'\n\n\n문제3 – 2021 카카오 채용연계형 인턴쉽 기출문제\n\n출처: https://school.programmers.co.kr/learn/courses/30/lessons/81301?language=ruby\n\n\n네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는게임입니다. 다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.\n1478 --&gt; \"one4seveneight\"\n234567 --&gt; \"23four5six7\"\n10203 --&gt; \"1zerotwozero3\"\n이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.\n참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.\n\n\n\n숫자\n영단어\n\n\n\n\n0\nzero\n\n\n1\none\n\n\n2\ntwo\n\n\n3\nthree\n\n\n4\nfour\n\n\n5\nfive\n\n\n6\nsix\n\n\n7\nseven\n\n\n8\neight\n\n\n9\nnine\n\n\n\n- 제한사항\n\n1 ≤ s의 길이 ≤ 50\ns가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다.\nreturn 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.\n\n- 입출력 예\n\n\n\ns\nresult\n\n\n\n\n“one4seveneight”\n1478\n\n\n“23four5six7”\n234567\n\n\n“2three45sixseven”\n234567\n\n\n“123”\n123\n\n\n\n- 입출력 예 설명\n\n입출력 예 #1 – 문제 예시와 같습니다.\n입출력 예 #2 – 문제 예시와 같습니다.\n입출력 예 #3 – “three”는 3, “six”는 6, “seven”은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다. 입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.\n입출력 예 #4 – s에는 영단어로 바뀐 부분이 없습니다.\n\n(풀이)\nhint 아래의 리스트를 활용해보세요\n\nx = [\n    ['zero', '0'],\n    ['one', '1'],\n    ['two', '2'],\n    ['three', '3'],\n    ['four', '4'],\n    ['five', '5'],\n    ['six', '6'],\n    ['seven', '7'],\n    ['eight', '8'],\n    ['nine', '9']\n]\nx\n\n[['zero', '0'],\n ['one', '1'],\n ['two', '2'],\n ['three', '3'],\n ['four', '4'],\n ['five', '5'],\n ['six', '6'],\n ['seven', '7'],\n ['eight', '8'],\n ['nine', '9']]"
  },
  {
    "objectID": "hands-on.html#코딩테스트",
    "href": "hands-on.html#코딩테스트",
    "title": "hands-on",
    "section": "",
    "text": "- 과거: 개념들을 배우고, 활용을 잘하면 코딩을 잘하는 것이다.\n\n제 생각: 개념을 활용하여 코딩을 잘하는건 많은 연습과 센스가 필요했음.\n\n개념1 – 숫자의 저장 및 계산\n\na=1\na\n\n1\n\n\n\nb=2\nb\n\n2\n\n\n\na+b\n\n3\n\n\n개념2 – 문자의 저장 및 계산\n\na = '이재명'\n\n\nb = '대통령'\n\n\na+b\n\n'이재명대통령'\n\n\n\na*2\n\n'이재명이재명'\n\n\n\nb*2\n\n'대통령대통령'\n\n\n\n(a+b)*2\n\n'이재명대통령이재명대통령'\n\n\n개념3 – 숫자의 문자화, 문자의 숫자화 (형태변환 )\n\na = 2025\na\n\n2025\n\n\n\na*2\n\n4050\n\n\n\na = str(a)\na # 문자같은데?\n\n'2025'\n\n\n\na*2 # 문자\n\n'20252025'\n\n\n개념4 – replace (저장된 타입이 문자일 경우 쓸 수 있는 특별한 기능)\n\ns = 'abc'\ns\n\n'abc'\n\n\n\ns.replace('b','B')\n\n'aBc'\n\n\n개념5 – 리스트 = “숫자, 문자를 여러개 남을 수 있는 그릇”\n\nx = [1,2,'a',3]\nx\n\n[1, 2, 'a', 3]\n\n\n\nx[0]*2\n\n2\n\n\n\nx[1]*2\n\n4\n\n\n\nx[2]*2\n\n'aa'\n\n\n\nx[3]*2\n\n6\n\n\n개념6 – 리스트의 원소 추가\n(예시1)\n\nx = [1,2,'a',3]\nx\n\n[1, 2, 'a', 3]\n\n\n\nx.append('b')\n\n\nx\n\n[1, 2, 'a', 3, 'b']\n\n\n(예시2)\n\nx = [] \nx\n\n[]\n\n\n\nx.append(1)\nx\n\n[1]\n\n\n\nx.append(2)\nx\n\n[1, 2]\n\n\n(예시3)\n\nx=[]\nx\n\n[]\n\n\n아래의 코드를 3번실행해보자.\n\nx.append(1)\nx.append(2)\n\nx에는 뭐가 있을까?\n개념7 – for문 (리스트와 같은 iterable객체의 원소를 반복하여 호출하는 테크닉)\n(예시1)\n\nx = [1,2,'a',3]\ny = []\n\n\nfor xi in x: \n    y.append(xi)\n\n\ny\n\n[1, 2, 'a', 3]\n\n\n(예시2)\n\nx = [1,2,'a',3]\ny = []\n\n\nfor xi in x: \n    y.append(xi*2)\n\n\ny\n\n[2, 4, 'aa', 6]\n\n\n문제1 – yyyy/mm/dd 타입을 yyyy-mm-dd 타입으로 변환하기\n아래와 같은 리스트가 있다.\n\nyear = ['2022/09/21','2022/10/30','2022/12/25','2023/01/01','2023/01/31','2023/03/20']\nyear\n\n['2022/09/21',\n '2022/10/30',\n '2022/12/25',\n '2023/01/01',\n '2023/01/31',\n '2023/03/20']\n\n\n날짜를 아래와 같은 형식으로 바꾸는 코드를 제시하라.\n\n['2022-09-21','2022-10-30','2022-12-25','2023-01-01','2023-01-31','2023-03-20']\n\n['2022-09-21',\n '2022-10-30',\n '2022-12-25',\n '2023-01-01',\n '2023-01-31',\n '2023-03-20']\n\n\n(풀이) – 해보세요\n개념8 – 문자열들로 이루어진 리스트의 원소를 이어주는 테크닉 (join)\n\nx = ['2022','01','31']\nx\n\n['2022', '01', '31']\n\n\n\nx[0]+'-'+x[1]+'-'+x[2]\n\n'2022-01-31'\n\n\n\n'-'.join(x) # '-'를 이용하여 x의 각 원소를 이어라\n\n'2022-01-31'\n\n\n개념9 – 문자열을 특정기호를 기준으로 분리하여 리스트로 만들기\n(예시1)\n\ny = '2022-01-31'\ny\n\n'2022-01-31'\n\n\n\ny.split('-')\n\n['2022', '01', '31']\n\n\n(예시2)\n\ny\n\n'2022-01-31'\n\n\n\nz = y.split('-')\nz\n\n['2022', '01', '31']\n\n\n\n'-'.join(z)\n\n'2022-01-31'\n\n\n문제2 – 기차만들기\n아래의 특수문자를 이용하여\n\nb = '■'\nb\n\n'■'\n\n\n다음과 같은 기차를 만들어보자.\n\n'■-■-■-■-■---■-■-■-■-■---■-■-■-■-■'\n\n'■-■-■-■-■---■-■-■-■-■---■-■-■-■-■'\n\n\n(풀이)\n개념10 – 리스트안의 리스트 (원소로 리스트를 가지는 리스트)\n\nx = [1,2]\ny = [3,4,5]\nlst = [x,y]\n\n\nlst[0]\n\n[1, 2]\n\n\n\nlst[0][0]\n\n1\n\n\n\nlst[0][1]\n\n2\n\n\n\nlst[1]\n\n[3, 4, 5]\n\n\n\nlst[1][0]\n\n3\n\n\n\nlst[1][1]\n\n4\n\n\n\nlst[1][2]\n\n5\n\n\n개념11 – 함수\n\ndef f(x):\n    y = x*3\n    return y \n\n\nf(1)\n\n3\n\n\n\nf('a')\n\n'aaa'\n\n\n문제3 – 2021 카카오 채용연계형 인턴쉽 기출문제\n\n출처: https://school.programmers.co.kr/learn/courses/30/lessons/81301?language=ruby\n\n\n네오와 프로도가 숫자놀이를 하고 있습니다. 네오가 프로도에게 숫자를 건넬때 일부 자릿수를 영단어로 바꾼 카드를 건네주면 프로도는 원래 숫자를 찾는게임입니다. 다음은 숫자의 일부 자릿수를 영단어로 바꾸는 예시입니다.\n1478 --&gt; \"one4seveneight\"\n234567 --&gt; \"23four5six7\"\n10203 --&gt; \"1zerotwozero3\"\n이렇게 숫자의 일부 자릿수가 영단어로 바뀌어졌거나, 혹은 바뀌지 않고 그대로인 문자열 s가 매개변수로 주어집니다. s가 의미하는 원래 숫자를 return 하도록 solution 함수를 완성해주세요.\n참고로 각 숫자에 대응되는 영단어는 다음 표와 같습니다.\n\n\n\n숫자\n영단어\n\n\n\n\n0\nzero\n\n\n1\none\n\n\n2\ntwo\n\n\n3\nthree\n\n\n4\nfour\n\n\n5\nfive\n\n\n6\nsix\n\n\n7\nseven\n\n\n8\neight\n\n\n9\nnine\n\n\n\n- 제한사항\n\n1 ≤ s의 길이 ≤ 50\ns가 “zero” 또는 “0”으로 시작하는 경우는 주어지지 않습니다.\nreturn 값이 1 이상 2,000,000,000 이하의 정수가 되는 올바른 입력만 s로 주어집니다.\n\n- 입출력 예\n\n\n\ns\nresult\n\n\n\n\n“one4seveneight”\n1478\n\n\n“23four5six7”\n234567\n\n\n“2three45sixseven”\n234567\n\n\n“123”\n123\n\n\n\n- 입출력 예 설명\n\n입출력 예 #1 – 문제 예시와 같습니다.\n입출력 예 #2 – 문제 예시와 같습니다.\n입출력 예 #3 – “three”는 3, “six”는 6, “seven”은 7에 대응되기 때문에 정답은 입출력 예 #2와 같은 234567이 됩니다. 입출력 예 #2와 #3과 같이 같은 정답을 가리키는 문자열이 여러 가지가 나올 수 있습니다.\n입출력 예 #4 – s에는 영단어로 바뀐 부분이 없습니다.\n\n(풀이)\nhint 아래의 리스트를 활용해보세요\n\nx = [\n    ['zero', '0'],\n    ['one', '1'],\n    ['two', '2'],\n    ['three', '3'],\n    ['four', '4'],\n    ['five', '5'],\n    ['six', '6'],\n    ['seven', '7'],\n    ['eight', '8'],\n    ['nine', '9']\n]\nx\n\n[['zero', '0'],\n ['one', '1'],\n ['two', '2'],\n ['three', '3'],\n ['four', '4'],\n ['five', '5'],\n ['six', '6'],\n ['seven', '7'],\n ['eight', '8'],\n ['nine', '9']]"
  },
  {
    "objectID": "hands-on.html#코딩테스트의-위기",
    "href": "hands-on.html#코딩테스트의-위기",
    "title": "hands-on",
    "section": "2. 코딩테스트의 위기",
    "text": "2. 코딩테스트의 위기\n실습1 – ChatGPT를 켜고 “2021 카카오 채용연계형 인턴쉽 기출문제”를 풀어달라고 부탁해보자.\n생각해볼점1 – 아래의 유튜브를 시청하고 (5:12 - 6:28 까지만 보면 됩니당) 본인의 생각을 정리해보자.\nhttps://www.youtube.com/watch?v=VpOrYvq7ruk&t=434s\n\n코딩테스트가 사라질까? (수능도 사라진다고 하는판에..)\n그럼 향후에는 어떠한 사람이 인재일까? 프로그래밍을 공부하는건 혹시 주산을 공부하는 것과 같은 일인가?\n\n생각해볼점2 – 반발\n\nhttps://brunch.co.kr/@23why/206 – 공부는 헛되지 않음, 프롬프트 작성 + 결과를 검토할 능력을 얻음\nhttps://asset200.tistory.com/4 – 오래된 정보(11), 환각(7)\n\n실습2 – 세종대왕의 맥북프로 던짐 사건을 재현해보자.\n\n맥북프로 던짐 사건 – 나무위키\n기세등등 (인공지능 별것 아니잖아?) https://www.chosun.com/national/weekend/2023/03/04/HR457QM36JFTXDUVAMMNG23MHQ/\n\n생각해볼점3 – GPT가 풀지 못하는 문제에 집중해야 할까?\n\n인간은 GPT가 여전히 해결하지 못하는 문제를 찾아야 할까?\n아니라면 GPT를 활용하는 방법을 알아야 할까?\n\n제 생각 – 활용해야 합니다.\n(옛날상식)\n\n\n\n-\n\n\n인공지능시대의 유망직종과 쇠퇴직종 &lt;출처: 인공지능 기술 발전이 가져올 미래 사회 변화 (2015)&gt;\n(상식의무너짐)\nhttp://www.aifnlife.co.kr/news/articleView.html?idxno=13100\n\n\n\n-\n\n\n복습 – AI시대에 LLM모형을 활용하는 올바른 프로그래머의 두 가지 선택\n\n왼쪽길: AI에만 너무 의존할 수 없다. 기본적인 코딩교육은 필요하다는 입장.\n오른쪽길: 순수하게 AI에만 의존해도 무방하다. (바이브코딩)\n\n\n왼쪽길과 오른쪽길의 공통점: 최근 LLM 기술의 동향을 파악하는 것이 매우 중요"
  },
  {
    "objectID": "hands-on.html#perplexity를-무시할-수-없는-이유-rag",
    "href": "hands-on.html#perplexity를-무시할-수-없는-이유-rag",
    "title": "hands-on",
    "section": "3. Perplexity를 무시할 수 없는 이유 (RAG)",
    "text": "3. Perplexity를 무시할 수 없는 이유 (RAG)\n실습1 – Perplexity를 켜고 “세종대왕의 맥북프로 던짐 사건”에 대하여 물어보자.\n실습2 – Perplexity를 켜고 “최규빈 교수 연구실 전화번호 좀 알려줘” 를 질문하자, 동일한 질문을 ChatGPT에게 해보자.\n실습3 – Perplexity를 켜고 “최규빈 교수가 R수업을 한 적 있는지 물어보자” 를 질문하자, 동일한 질문을 ChatGPT에게 해보자.\n실습4 – 구글AI모드를 켜고 실습해보자."
  },
  {
    "objectID": "hands-on.html#틈새시장을-공략한-cursor-ide통합",
    "href": "hands-on.html#틈새시장을-공략한-cursor-ide통합",
    "title": "hands-on",
    "section": "4. 틈새시장을 공략한 Cursor (IDE통합)",
    "text": "4. 틈새시장을 공략한 Cursor (IDE통합)\n아래의 코드가 있다.\n\nimport matplotlib.pyplot as plt\nx = [1,2,3,4]\ny = [2,5,-3,4]\nplt.plot(x,y)\n\n\n\n\n\n\n\n\n그림의 제목을 “Figure: Line Plot” 이라고 붙이고 싶어서 아래의 코드를 실행했다.\n\nplt.plot(x,y,title=\"Figure: Line Plot\")\n\n\n---------------------------------------------------------------------------\n\nAttributeError                            Traceback (most recent call last)\n\nCell In[64], line 1\n\n----&gt; 1 plt.plot(x,y,title=\"Figure: Line Plot\")\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/pyplot.py:3838, in plot(scalex, scaley, data, *args, **kwargs)\n\n   3830 @_copy_docstring_and_deprecators(Axes.plot)\n\n   3831 def plot(\n\n   3832     *args: float | ArrayLike | str,\n\n   (...)\n\n   3836     **kwargs,\n\n   3837 ) -&gt; list[Line2D]:\n\n-&gt; 3838     return gca().plot(\n\n   3839         *args,\n\n   3840         scalex=scalex,\n\n   3841         scaley=scaley,\n\n   3842         **({\"data\": data} if data is not None else {}),\n\n   3843         **kwargs,\n\n   3844     )\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_axes.py:1777, in Axes.plot(self, scalex, scaley, data, *args, **kwargs)\n\n   1534 \"\"\"\n\n   1535 Plot y versus x as lines and/or markers.\n\n   1536 \n\n   (...)\n\n   1774 (``'green'``) or hex strings (``'#008000'``).\n\n   1775 \"\"\"\n\n   1776 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n\n-&gt; 1777 lines = [*self._get_lines(self, *args, data=data, **kwargs)]\n\n   1778 for line in lines:\n\n   1779     self.add_line(line)\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:297, in _process_plot_var_args.__call__(self, axes, data, return_kwargs, *args, **kwargs)\n\n    295     this += args[0],\n\n    296     args = args[1:]\n\n--&gt; 297 yield from self._plot_args(\n\n    298     axes, this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey,\n\n    299     return_kwargs=return_kwargs\n\n    300 )\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:546, in _process_plot_var_args._plot_args(self, axes, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\n\n    544     return list(result)\n\n    545 else:\n\n--&gt; 546     return [l[0] for l in result]\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:539, in &lt;genexpr&gt;(.0)\n\n    534 else:\n\n    535     raise ValueError(\n\n    536         f\"label must be scalar or have the same length as the input \"\n\n    537         f\"data, but found {len(label)} for {n_datasets} datasets.\")\n\n--&gt; 539 result = (make_artist(axes, x[:, j % ncx], y[:, j % ncy], kw,\n\n    540                       {**kwargs, 'label': label})\n\n    541           for j, label in enumerate(labels))\n\n    543 if return_kwargs:\n\n    544     return list(result)\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:338, in _process_plot_var_args._make_line(self, axes, x, y, kw, kwargs)\n\n    336 kw = {**kw, **kwargs}  # Don't modify the original kw.\n\n    337 self._setdefaults(self._getdefaults(kw), kw)\n\n--&gt; 338 seg = mlines.Line2D(x, y, **kw)\n\n    339 return seg, kw\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/lines.py:421, in Line2D.__init__(self, xdata, ydata, linewidth, linestyle, color, gapcolor, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\n\n    417 self.set_markeredgewidth(markeredgewidth)\n\n    419 # update kwargs before updating data to give the caller a\n\n    420 # chance to init axes (and hence unit support)\n\n--&gt; 421 self._internal_update(kwargs)\n\n    422 self.pickradius = pickradius\n\n    423 self.ind_offset = 0\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/artist.py:1233, in Artist._internal_update(self, kwargs)\n\n   1226 def _internal_update(self, kwargs):\n\n   1227     \"\"\"\n\n   1228     Update artist properties without prenormalizing them, but generating\n\n   1229     errors as if calling `set`.\n\n   1230 \n\n   1231     The lack of prenormalization is to maintain backcompatibility.\n\n   1232     \"\"\"\n\n-&gt; 1233     return self._update_props(\n\n   1234         kwargs, \"{cls.__name__}.set() got an unexpected keyword argument \"\n\n   1235         \"{prop_name!r}\")\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/artist.py:1206, in Artist._update_props(self, props, errfmt)\n\n   1204             func = getattr(self, f\"set_{k}\", None)\n\n   1205             if not callable(func):\n\n-&gt; 1206                 raise AttributeError(\n\n   1207                     errfmt.format(cls=type(self), prop_name=k),\n\n   1208                     name=k)\n\n   1209             ret.append(func(v))\n\n   1210 if ret:\n\n\n\nAttributeError: Line2D.set() got an unexpected keyword argument 'title'\n\n\n\n에러를 어떻게 하면 좋을까?\n실습1 – ChatGPT에게 물어서 대안을 물어보고 해결하기\n\nplt.plot(x,y,title=\"Figure: Line Plot\") # 이 코드를 수정하라\n\n\n---------------------------------------------------------------------------\n\nAttributeError                            Traceback (most recent call last)\n\nCell In[65], line 1\n\n----&gt; 1 plt.plot(x,y,title=\"Figure: Line Plot\") # 이 코드를 수정하라\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/pyplot.py:3838, in plot(scalex, scaley, data, *args, **kwargs)\n\n   3830 @_copy_docstring_and_deprecators(Axes.plot)\n\n   3831 def plot(\n\n   3832     *args: float | ArrayLike | str,\n\n   (...)\n\n   3836     **kwargs,\n\n   3837 ) -&gt; list[Line2D]:\n\n-&gt; 3838     return gca().plot(\n\n   3839         *args,\n\n   3840         scalex=scalex,\n\n   3841         scaley=scaley,\n\n   3842         **({\"data\": data} if data is not None else {}),\n\n   3843         **kwargs,\n\n   3844     )\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_axes.py:1777, in Axes.plot(self, scalex, scaley, data, *args, **kwargs)\n\n   1534 \"\"\"\n\n   1535 Plot y versus x as lines and/or markers.\n\n   1536 \n\n   (...)\n\n   1774 (``'green'``) or hex strings (``'#008000'``).\n\n   1775 \"\"\"\n\n   1776 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n\n-&gt; 1777 lines = [*self._get_lines(self, *args, data=data, **kwargs)]\n\n   1778 for line in lines:\n\n   1779     self.add_line(line)\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:297, in _process_plot_var_args.__call__(self, axes, data, return_kwargs, *args, **kwargs)\n\n    295     this += args[0],\n\n    296     args = args[1:]\n\n--&gt; 297 yield from self._plot_args(\n\n    298     axes, this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey,\n\n    299     return_kwargs=return_kwargs\n\n    300 )\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:546, in _process_plot_var_args._plot_args(self, axes, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\n\n    544     return list(result)\n\n    545 else:\n\n--&gt; 546     return [l[0] for l in result]\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:539, in &lt;genexpr&gt;(.0)\n\n    534 else:\n\n    535     raise ValueError(\n\n    536         f\"label must be scalar or have the same length as the input \"\n\n    537         f\"data, but found {len(label)} for {n_datasets} datasets.\")\n\n--&gt; 539 result = (make_artist(axes, x[:, j % ncx], y[:, j % ncy], kw,\n\n    540                       {**kwargs, 'label': label})\n\n    541           for j, label in enumerate(labels))\n\n    543 if return_kwargs:\n\n    544     return list(result)\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:338, in _process_plot_var_args._make_line(self, axes, x, y, kw, kwargs)\n\n    336 kw = {**kw, **kwargs}  # Don't modify the original kw.\n\n    337 self._setdefaults(self._getdefaults(kw), kw)\n\n--&gt; 338 seg = mlines.Line2D(x, y, **kw)\n\n    339 return seg, kw\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/lines.py:421, in Line2D.__init__(self, xdata, ydata, linewidth, linestyle, color, gapcolor, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\n\n    417 self.set_markeredgewidth(markeredgewidth)\n\n    419 # update kwargs before updating data to give the caller a\n\n    420 # chance to init axes (and hence unit support)\n\n--&gt; 421 self._internal_update(kwargs)\n\n    422 self.pickradius = pickradius\n\n    423 self.ind_offset = 0\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/artist.py:1233, in Artist._internal_update(self, kwargs)\n\n   1226 def _internal_update(self, kwargs):\n\n   1227     \"\"\"\n\n   1228     Update artist properties without prenormalizing them, but generating\n\n   1229     errors as if calling `set`.\n\n   1230 \n\n   1231     The lack of prenormalization is to maintain backcompatibility.\n\n   1232     \"\"\"\n\n-&gt; 1233     return self._update_props(\n\n   1234         kwargs, \"{cls.__name__}.set() got an unexpected keyword argument \"\n\n   1235         \"{prop_name!r}\")\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/artist.py:1206, in Artist._update_props(self, props, errfmt)\n\n   1204             func = getattr(self, f\"set_{k}\", None)\n\n   1205             if not callable(func):\n\n-&gt; 1206                 raise AttributeError(\n\n   1207                     errfmt.format(cls=type(self), prop_name=k),\n\n   1208                     name=k)\n\n   1209             ret.append(func(v))\n\n   1210 if ret:\n\n\n\nAttributeError: Line2D.set() got an unexpected keyword argument 'title'\n\n\n\n실습2 – 코랩에서 Explain error를 활용하여 해결하기\n\n\n\n-\n\n\n\nplt.plot(x,y,title=\"Figure: Line Plot\") # 이 코드를 수정하라\n\n\n---------------------------------------------------------------------------\n\nAttributeError                            Traceback (most recent call last)\n\nCell In[66], line 1\n\n----&gt; 1 plt.plot(x,y,title=\"Figure: Line Plot\") # 이 코드를 수정하라\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/pyplot.py:3838, in plot(scalex, scaley, data, *args, **kwargs)\n\n   3830 @_copy_docstring_and_deprecators(Axes.plot)\n\n   3831 def plot(\n\n   3832     *args: float | ArrayLike | str,\n\n   (...)\n\n   3836     **kwargs,\n\n   3837 ) -&gt; list[Line2D]:\n\n-&gt; 3838     return gca().plot(\n\n   3839         *args,\n\n   3840         scalex=scalex,\n\n   3841         scaley=scaley,\n\n   3842         **({\"data\": data} if data is not None else {}),\n\n   3843         **kwargs,\n\n   3844     )\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_axes.py:1777, in Axes.plot(self, scalex, scaley, data, *args, **kwargs)\n\n   1534 \"\"\"\n\n   1535 Plot y versus x as lines and/or markers.\n\n   1536 \n\n   (...)\n\n   1774 (``'green'``) or hex strings (``'#008000'``).\n\n   1775 \"\"\"\n\n   1776 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)\n\n-&gt; 1777 lines = [*self._get_lines(self, *args, data=data, **kwargs)]\n\n   1778 for line in lines:\n\n   1779     self.add_line(line)\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:297, in _process_plot_var_args.__call__(self, axes, data, return_kwargs, *args, **kwargs)\n\n    295     this += args[0],\n\n    296     args = args[1:]\n\n--&gt; 297 yield from self._plot_args(\n\n    298     axes, this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey,\n\n    299     return_kwargs=return_kwargs\n\n    300 )\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:546, in _process_plot_var_args._plot_args(self, axes, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)\n\n    544     return list(result)\n\n    545 else:\n\n--&gt; 546     return [l[0] for l in result]\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:539, in &lt;genexpr&gt;(.0)\n\n    534 else:\n\n    535     raise ValueError(\n\n    536         f\"label must be scalar or have the same length as the input \"\n\n    537         f\"data, but found {len(label)} for {n_datasets} datasets.\")\n\n--&gt; 539 result = (make_artist(axes, x[:, j % ncx], y[:, j % ncy], kw,\n\n    540                       {**kwargs, 'label': label})\n\n    541           for j, label in enumerate(labels))\n\n    543 if return_kwargs:\n\n    544     return list(result)\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/axes/_base.py:338, in _process_plot_var_args._make_line(self, axes, x, y, kw, kwargs)\n\n    336 kw = {**kw, **kwargs}  # Don't modify the original kw.\n\n    337 self._setdefaults(self._getdefaults(kw), kw)\n\n--&gt; 338 seg = mlines.Line2D(x, y, **kw)\n\n    339 return seg, kw\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/lines.py:421, in Line2D.__init__(self, xdata, ydata, linewidth, linestyle, color, gapcolor, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\n\n    417 self.set_markeredgewidth(markeredgewidth)\n\n    419 # update kwargs before updating data to give the caller a\n\n    420 # chance to init axes (and hence unit support)\n\n--&gt; 421 self._internal_update(kwargs)\n\n    422 self.pickradius = pickradius\n\n    423 self.ind_offset = 0\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/artist.py:1233, in Artist._internal_update(self, kwargs)\n\n   1226 def _internal_update(self, kwargs):\n\n   1227     \"\"\"\n\n   1228     Update artist properties without prenormalizing them, but generating\n\n   1229     errors as if calling `set`.\n\n   1230 \n\n   1231     The lack of prenormalization is to maintain backcompatibility.\n\n   1232     \"\"\"\n\n-&gt; 1233     return self._update_props(\n\n   1234         kwargs, \"{cls.__name__}.set() got an unexpected keyword argument \"\n\n   1235         \"{prop_name!r}\")\n\n\n\nFile ~/Library/CloudStorage/Dropbox/07-sld/2025-09-07-ChatGPT와파이썬/.venv/lib/python3.14/site-packages/matplotlib/artist.py:1206, in Artist._update_props(self, props, errfmt)\n\n   1204             func = getattr(self, f\"set_{k}\", None)\n\n   1205             if not callable(func):\n\n-&gt; 1206                 raise AttributeError(\n\n   1207                     errfmt.format(cls=type(self), prop_name=k),\n\n   1208                     name=k)\n\n   1209             ret.append(func(v))\n\n   1210 if ret:\n\n\n\nAttributeError: Line2D.set() got an unexpected keyword argument 'title'\n\n\n\n생각해볼점1 – 무엇이 더 편리한가?\n실습3 – 코랩에서 toggle gemini를 활용하여 scatter plot을 하나 그려라.\n\n\n\n-\n\n\n\n가능하면 의미있는 예제를 그려보도록 하자. 예를들면 온도와 아이스아메리카노 판매량과 같은\n\n실습4 – 실습3에서 만든 예제를 설명하는 문서를 만들어 보도록 하자.\n실습5 – 머신러닝 모형을 이용하여 산점도에 적당한 추세선을 추가해보도록 하자.\n실습6 – 머신러닝 모형을이용하여 간단한 예측을 해보도록 하자.\n실습7 – 모형과 코드를 설명하는 문서를 작성해보자.\n생각해볼점2 – 커서는 모델에 대한 기여는 없다. 그래도 커서는 유용한가? 커서가 혁신이라고 생각하는가?\n생각해볼점3 – 커서에 얼만큼의 돈을 지불할 수 있을까? (ChatGTP보다 더 지불할 의향이 있는가?)\n\nhttps://www.youtube.com/watch?v=-PN3xY7ZeMA"
  },
  {
    "objectID": "hands-on.html#claude의-반격1-아티팩트",
    "href": "hands-on.html#claude의-반격1-아티팩트",
    "title": "hands-on",
    "section": "5. Claude의 반격1 (아티팩트)",
    "text": "5. Claude의 반격1 (아티팩트)\n실습1 – 클로드에 접속하고 강의노트를 업로드하여 5개의 OX퀴즈를 만들자.\n실습2 – 실습1에서 만든 OX퀴즈를 플래시카드앱으로 만들자.\n실습3 – 만든 앱을 배포하자.\n실습4 – 랜덤으로 문제를 섞는 기능을 추가해보자.\n실습5 – 툴팁기능을 추가해보자.\n실습6 – 문제 히스토리 기능을 추가해보자."
  },
  {
    "objectID": "hands-on.html#claude의-반격2-mcp",
    "href": "hands-on.html#claude의-반격2-mcp",
    "title": "hands-on",
    "section": "6. Claude의 반격2 (MCP)",
    "text": "6. Claude의 반격2 (MCP)\n\n이건 돈을 내야해서요.. 실습하긴 어렵습니다."
  },
  {
    "objectID": "hands-on.html#claude의-반격3-clude-code",
    "href": "hands-on.html#claude의-반격3-clude-code",
    "title": "hands-on",
    "section": "7. Claude의 반격3 (clude code)",
    "text": "7. Claude의 반격3 (clude code)\n실습1 – 파이썬을 이용해 아래의 주소에 접속하여 자료를 가져오고 압축을 풀어라. (설마 안배워서 모른다고 하진 않겠죠?)\n\nhttps://github.com/guebin/rda251022/blob/main/Downloads.zip\n\n실습2 – 제미나이cli에 접속하라.\n실습3 – Downloads폴더의 내용을 파악하라.\n실습4 – AI.txt를 찾고 문항과 정답을 각각 파일별로 분리하는 파이썬 코드를 작성하라.\n실습5 – 제미나이cli를 이용하여 이미지 파일들의 이름을 바꿔라.\n\n이미지파일크기를 조사\n이미지파일의 생성날짜를 조사\n위의 정보를 혼합하여 적절한 네이밍 규칙에 따라 이름을 바꾸라\n\n실습6 – 폴더 image를 별도로 만들고, 모든 이미지 파일을 그 폴더에 복사하는 파이썬 코드를 작성하라.\n실습7 – 22명의 학생들에 대한 출석점수, 중간고사점수, 기말고사 점수가 저장되어있는 파일을 파악하라. 그것을 바탕으로 모든 학생들의 점수를 정리한 엑셀파일 scores.csv를 만들어라.\n실습8 – 출석 20%, 중간고사 30%, 기말고사 50% 의 가중치를 반영하여 최종스코어를 계산하라."
  },
  {
    "objectID": "hands-on.html#구글의-반격-노트북lm",
    "href": "hands-on.html#구글의-반격-노트북lm",
    "title": "hands-on",
    "section": "8. 구글의 반격 (노트북LM)",
    "text": "8. 구글의 반격 (노트북LM)\n\npass"
  },
  {
    "objectID": "1022.html#강사소개",
    "href": "1022.html#강사소개",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "강사소개",
    "text": "강사소개\n최규빈 | 전북대학교 통계학과\n\nPosition: Chair, Department of Statistics | Director, Applied Statistics Research Institute\nEmail: guebin@jbnu.ac.kr\nPhone: (+82) 63-270-3387\nYouTube: https://www.youtube.com/channel/UCQk9RyBNgXc7ORIsYlOfQrg"
  },
  {
    "objectID": "1022.html#학습목표",
    "href": "1022.html#학습목표",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "학습목표",
    "text": "학습목표\n본 강의를 통해 수강생들은 다음을 이해할 수 있습니다:\n\nAI 시대의 프로그래밍 패러다임 변화\n\n생성형 AI 혁명의 타임라인과 주요 기술들\n바이브코딩 vs 전통적 코딩의 차이점\n\nAI 도구 활용 실무 능력\n\nChatGPT, Claude Code 등 AI 도구의 실전 활용\n프롬프트 엔지니어링과 효과적인 AI 협업\n\n미래 개발자의 핵심 역량\n\nAI 시대에 필요한 새로운 스킬셋\n파이썬 학습의 필요성과 방향성"
  },
  {
    "objectID": "1022.html#hidden-figures",
    "href": "1022.html#hidden-figures",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Hidden Figures",
    "text": "Hidden Figures\n\nFigure: Hidden Figures, An incredible & inspiring untold true story about three women at NASA who were instrumental in one of history’s greatest operations – the launch of astronaut John Glenn into orbit. [1]"
  },
  {
    "objectID": "1022.html#hidden-figures-1",
    "href": "1022.html#hidden-figures-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Hidden Figures",
    "text": "Hidden Figures\n영화리뷰: https://www.youtube.com/watch?v=6EFhm1mONX8"
  },
  {
    "objectID": "1022.html#hidden-figures-2",
    "href": "1022.html#hidden-figures-2",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Hidden Figures",
    "text": "Hidden Figures\n\nFigure: 히든피겨스에 달린 댓글들"
  },
  {
    "objectID": "1022.html#주산",
    "href": "1022.html#주산",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주산",
    "text": "주산\n\nFigure: 주판 (이미지출처: 구글 제미나이)"
  },
  {
    "objectID": "1022.html#주산-1",
    "href": "1022.html#주산-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주산",
    "text": "주산\n\n전설의 암산왕: https://www.youtube.com/watch?v=RQnn_vOwmNU\n1950년 6·25 전쟁 이후 국가 정책 차원에서 주산 교육이 상업교육 과정에 도입되었으며, 1960년대에는 초등학교로까지 확대 보급되었다. 이 시기에는 7급부터 1급까지의 주산 급수 제도가 운영되었고, 교육부와 대한상공회의소가 주관하는 주산능력검정시험이 시행되면서 주산의 위상은 더욱 강화되었다. 그러나 1980년대 후반 전자계산기가 빠르게 보급되면서 주산 교육은 급속히 쇠퇴하였다. 결국 1991년에는 주산능력검정시험마저 폐지되었고, 이후 7차 교육과정부터는 수학 교과서에서 주산 교육이 완전히 사라지게 되었다. [2]"
  },
  {
    "objectID": "1022.html#기술은-인재의-기준을-바꾼다",
    "href": "1022.html#기술은-인재의-기준을-바꾼다",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "기술은 인재의 기준을 바꾼다",
    "text": "기술은 인재의 기준을 바꾼다\n\n\n\n\n\n\n\n\n구분\n기술 등장 전 인재 정의\n기술 등장 후 인재 정의\n\n\n\n\n수학\n계산을 정확하고 빠르게 하는 사람\n계산도구(=컴퓨터)를 활용한 문제해결과 응용에 강한 사람\n\n\n프로그래밍\n코드를 직접 작성하고 디버깅할 수 있는 사람\nAI를 활용해 아이디어를 빠르게 구현·검증하고 창의적 문제 해결에 집중하는 사람1\n\n\n\n\n새로운 기술은 인재의 기준을 바꾼다. 계산기의 등장은 암산 능력을 최고라 여기던 시대를 끝냈다.\nGPT의 등장은 코더에게 어떤 의미일까?\n\n이라고 하는데 사실 저도 잘 모르겠습니다"
  },
  {
    "objectID": "1022.html#ai-물결-속에-파이썬-공부를-해야할까",
    "href": "1022.html#ai-물결-속에-파이썬-공부를-해야할까",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "AI 물결 속에 파이썬 공부를 해야할까?",
    "text": "AI 물결 속에 파이썬 공부를 해야할까?\n\nFigure: 우리는 왼쪽으로 가야하는가? 아니면 오른쪽으로 가야하는가? (이미지출처: 구글 제미나이)"
  },
  {
    "objectID": "1022.html#년-여름-어떤-카페에서",
    "href": "1022.html#년-여름-어떤-카페에서",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "2025년 여름, 어떤 카페에서",
    "text": "2025년 여름, 어떤 카페에서\n\nFigure: AI의 원리를 파고들던 시절과 AI를 도구로 쓰는 지금"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인",
    "href": "1022.html#생성형-ai-혁명-타임라인",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n2022년: 혁명의 시작\n\n2022년 11월\n\nChatGPT 출시\n\n2022년 12월\n\nPerplexity 출시\n\n인용 정보를 제공 [3]"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-1",
    "href": "1022.html#생성형-ai-혁명-타임라인-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n2023년: 경쟁과 다양화\n\n2023년 2월\n\nGoogle Bard 발표 [4]\n\nChatGPT 대항마로 발표\n오류로 주가 급락 [5], [6]\n\n\n2023년 3월\n\nGPT-4 출시 [7]\n\n멀티모달 능력 (텍스트+이미지) 첫 도입\n\nClaude 1.0 출시 [8]\nCursor AI 출시 [9]\n\nVS Code 기반 AI 코딩 어시스턴트"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-2",
    "href": "1022.html#생성형-ai-혁명-타임라인-2",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n\n2023년 7월\n\nDeepSeek 설립 [10]\n\n중국 항저우, High-Flyer 헤지펀드가 창립\n\nClaude 2 출시 [8]\n\n2023년 12월\n\nGoogle Gemini 1.0 발표 [11]"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-3",
    "href": "1022.html#생성형-ai-혁명-타임라인-3",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n2024년: 멀티모달과 도구의 폭발\n\n2024년 2월\n\nOpenAI Sora 데모 공개 [12]\n\n2024년 3월\n\nGoogle Gemini 1.5 Pro 발표 [13]\nClaude 3 (Opus, Sonnet, Haiku) 출시 [8]\n\n2024년 5월\n\nGPT-4o 출시 [14]\n\n텍스트 + 이미지 + 비디오 지원\n\n\n2024년 6월\n\nClaude 3.5 Sonnet + Artifacts 출시 [8]"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-4",
    "href": "1022.html#생성형-ai-혁명-타임라인-4",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n\n2024년 7월\n\nSearchGPT (ChatGPT Search) [15]\n\n이제 ChatGPT 역시 RAG 도입!\n\n\n2024년 9월\n\nOpenAI o1 추론 모델 출시 [16]\n\n“생각하는 AI”, 수학에서 PhD 수준\n\n\n2024년 11월\n\nWindsurf 출시 (Cursor AI와 경쟁) [17]\nMCP 출시 (Anthropic이 오픈소스로 공개) [18]\n\nAI 시스템과 외부 데이터 소스 연결의 표준 프로토콜\n“AI의 USB-C” - 통합 인터페이스로 N×M 통합 문제 해결\nClaude Desktop에서 첫 지원, Google Drive, Slack, GitHub 등 서버 제공"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-5",
    "href": "1022.html#생성형-ai-혁명-타임라인-5",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n2025년: 에이전트 시대와 글로벌 경쟁\n\n2025년 1월\n\nDeepSeek-R1 출시 - “AI의 스푸트니크 순간” [19]\n\n600만 달러로 OpenAI o1과 동등 성능 달성 [20] [21]\n앱이 며칠 만에 ChatGPT 제치고 미국 App Store 1위\nMIT 라이선스 완전 오픈소스, API 96% 저렴 [22]\nNvidia 주가 18% 급락, 미국 빅테크 동반 하락 [23]"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-6",
    "href": "1022.html#생성형-ai-혁명-타임라인-6",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n\n2025년 2월\n\nNotebookLM 출시 [24]\n\n문서를 팟캐스트로 변환, 대학생들에게 인기 [25]\n\nClaude 3.7 Sonnet + Claude Code 연구 프리뷰 [26]\n바이브코딩(Vibe Coding 용어 등장) [27]\n\nAI와의 직관적이고 대화형 협업 방식을 지창하는 개념 최초 제시\n전통적 코딩에서 자연어 기반 창작으로의 패러다임 전환 정의\n세간에서 꽤나 화제를 모으며 개발자 커뮤니티 전반에 확산"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-7",
    "href": "1022.html#생성형-ai-혁명-타임라인-7",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n\n2025년 5월\n\nClaude Code 정식 출시 [28]\n\n터미널 기반 AI 에이전트 프로그래밍\n에이전트형 코딩의 시대 본격화\n\n\n2025년 7월\n\nGoogle Gemini CLI 출시 [29]\n\n에이전트형 코딩 진영 강화: 자율적 다단계 작업 수행\nGoogle의 Claude Code 대항마\n\nPerplexity Comet 브라우저 출시 [30]"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-8",
    "href": "1022.html#생성형-ai-혁명-타임라인-8",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n주관적으로 정리해본 주요 사건\n\n2022.11: ChatGPT로 생성형 AI 대중화 시작\n2022.12: Perplexity, RAG 기술 활용\n2023.02: Google Bard 발표\n2024.09: o1 추론 모델 출시\n2024.11: MCP의 등장\n2025.01: DeepSeek-R1 출시\n2025.02: “바이브코딩” 등장 (카파시)\n2025.05: 클로드코드 출시\n2025.07: GeminiCLI 출시"
  },
  {
    "objectID": "1022.html#생성형-ai-혁명-타임라인-9",
    "href": "1022.html#생성형-ai-혁명-타임라인-9",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "생성형 AI 혁명 타임라인",
    "text": "생성형 AI 혁명 타임라인\n주요 경쟁 구도\n\n모델: OpenAI (ChatGPT) vs Anthropic (Claude) vs Google (Gemini)\n개발도구: Cursor vs Windsurf vs Claude Code vs Gemini CLI"
  },
  {
    "objectID": "1022.html#주요개념---rag",
    "href": "1022.html#주요개념---rag",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - RAG",
    "text": "주요개념 - RAG\n\nRetrieval-Augmented Generation, 줄여서 RAG는 AI 언어 모델이 외부 지식 기반을 참조하여 답변을 생성하는 구조\n전통적인 LLM은 학습된 데이터만을 기반으로 응답하지만 RAG는 (1) 질의에 관련된 정보를 외부 문서나 데이터베이스에서 가져오고 (2) 검색된 정보를 바탕으로 답변을 생성.\n효과: 정확도 향상 (외부사실에 기반하므로 환각문제 최소화), 최신성 확보 (학습 이후 업데이트된 정보도 실시간 반영가능), 특정분야 대응성 강화 (기업문서나 전문 도메인자료를 응답에 활용할 수 있음.)"
  },
  {
    "objectID": "1022.html#주요개념---rag-1",
    "href": "1022.html#주요개념---rag-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - RAG",
    "text": "주요개념 - RAG\n\n\n\n\n\n\n\n구분\n내용\n\n\n\n\nRAG 이전\n- 모델은 학습된 파라미터 안에서만 답변 가능- 최신 정보 반영 어려움 - 특정 도메인 전문 지식 부족- “죄송하지만 2021년 9월 이후의 데이터는 모릅니다.”라는 한계\n\n\nRAG 이후\n- “내가 올린 문서에서 관련 부분 찾아 요약해줘”→ 벡터DB에서 검색 후 LLM이 결합해 답변- “최신 논문 내용을 반영해 설명해줘”→ 외부 지식베이스 + 모델 결합으로 최신성 확보- “우리 회사 데이터 기준으로 리포트 작성해줘”→ 사내 문서/DB 연동해 맞춤형 응답 생성"
  },
  {
    "objectID": "1022.html#주요개념---바이브코딩",
    "href": "1022.html#주요개념---바이브코딩",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - 바이브코딩",
    "text": "주요개념 - 바이브코딩\n\nFigure: 바이브코딩이 탄생한 첫 트윗 [31]"
  },
  {
    "objectID": "1022.html#주요개념---바이브코딩-1",
    "href": "1022.html#주요개념---바이브코딩-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - 바이브코딩",
    "text": "주요개념 - 바이브코딩\n\nAndrej Karpathy가 2025년 2월에 대중화한 인공 지능 지원 소프트웨어 개발 기술\n개발자가 프로젝트나 작업을 대규모 언어 모델 (LLM)에 설명하면, LLM은 프롬프트 를 기반으로 코드를 생성\n개발자는 코드를 검토하거나 수정하지 않고, 도구와 실행 결과만을 사용하여 코드를 평가하고 LLM에 개선 사항을 요청\n바이브 코딩 옹호자들은 이를 통해 아마추어 프로그래머 조차도 소프트웨어 엔지니어링에 필요한 광범위한 교육과 기술 없이 소프트웨어를 생산할 수 있다고 말함\n\nExamples\n\nhttps://www.youtube.com/shorts/cOM_iR1wsQ8\nhttps://www.youtube.com/shorts/CFvpagumlv0"
  },
  {
    "objectID": "1022.html#주요개념---mcp",
    "href": "1022.html#주요개념---mcp",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - MCP",
    "text": "주요개념 - MCP\n\nModel Context Protocol (MCP)은 AI 어시스턴트가 외부 데이터 소스와 도구에 안전하고 통제된 방식으로 접근할 수 있도록 하는 개방형 표준 프로토콜을 의미.\nMCP는 AI 모델과 외부 시스템 간의 표준화된 인터페이스를 제공. 이를 통해 AI는 파일 시스템, 데이터베이스, 웹 API, 비즈니스 시스템 등 다양한 컨텍스트 소스에 접근할 수 있음.\n\nExamples\nhttps://www.youtube.com/shorts/XPACEy2JlOk"
  },
  {
    "objectID": "1022.html#주요개념---mcp-1",
    "href": "1022.html#주요개념---mcp-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - MCP",
    "text": "주요개념 - MCP\n\n\n\n\n\n\n\n구분\n내용\n\n\n\n\nMCP 이전\n- ChatGPT: “저는 당신의 이메일을 볼 수 없어서…”- Claude: “제가 당신의 캘린더에 접근할 수 없어서…”- Gemini: “죄송하지만 개인 파일은 확인할 수 없습니다…”\n\n\nMCP 이후\n- “지난 3개월간 가장 중요했던 이메일 10개 요약해줘”→ Gmail MCP 서버가 실제 이메일 데이터 분석- “내일 회의 준비를 위해 관련 문서들 정리해줘”→ Calendar + Drive + Slack MCP가 연동되어 완벽한 브리핑 생성- “이번 프로젝트 진행상황을 팀에게 보고서로 만들어줘”→ Jira + GitHub + 내 작업 로그를 종합한 자동 리포트"
  },
  {
    "objectID": "1022.html#주요개념---agentic-coding",
    "href": "1022.html#주요개념---agentic-coding",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - Agentic Coding",
    "text": "주요개념 - Agentic Coding\n\n에이전틱 코딩은 AI 에이전트가 자율적으로 코딩 작업을 수행하는 패러다임. 단순히 코드 생성을 넘어서, 계획 수립부터 실행, 테스트, 디버깅까지 전체 개발 과정을 AI가 주도적으로 처리.\nChatCPT에게는 답을 물어볼 수 있고, Claude Code에게는 일을 시킬 수 있다."
  },
  {
    "objectID": "1022.html#주요개념---agentic-coding-1",
    "href": "1022.html#주요개념---agentic-coding-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "주요개념 - Agentic Coding",
    "text": "주요개념 - Agentic Coding\n\nFigure: 바이브코딩과 에이전틱 코딩의 차이점 [32]"
  },
  {
    "objectID": "1022.html#오른쪽-길을-마치며",
    "href": "1022.html#오른쪽-길을-마치며",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "오른쪽 길을 마치며",
    "text": "오른쪽 길을 마치며\n\n가장 인기 있는 새로운 프로그래밍 언어는 영어 (Andrej Karpathy)"
  },
  {
    "objectID": "1022.html#바이브코딩에-대한-비판",
    "href": "1022.html#바이브코딩에-대한-비판",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "바이브코딩에 대한 비판",
    "text": "바이브코딩에 대한 비판\n\nProgrammer Simon Willison said:\n\n\n“If an LLM wrote every line of your code, but you’ve reviewed, tested, and understood it all, that’s not vibe coding in my book—that’s using an LLM as a typing assistant.”\n\n\n저의 생각: 좀 과하지 않나?"
  },
  {
    "objectID": "1022.html#바이브코딩의-한계",
    "href": "1022.html#바이브코딩의-한계",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "바이브코딩의 한계",
    "text": "바이브코딩의 한계\nExamples\n\nhttps://www.youtube.com/shorts/NXIIqHXWsTk\nhttps://www.youtube.com/shorts/KzewB6tX8p8"
  },
  {
    "objectID": "1022.html#francis-geng의-연구",
    "href": "1022.html#francis-geng의-연구",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Francis Geng의 연구",
    "text": "Francis Geng의 연구\n\nFrancis Geng 연구팀은 “바이브 코딩(Vibe Coding)”이라는 새로운 프로그래밍 워크플로우에서 학생들이 AI 도구와 어떻게 상호작용하는지, 그리고 이러한 상호작용이 프로그래밍 경험 수준에 따라 어떻게 다른지 조사하였음 [33]\n실험설계: 연구에는 북미 연구 중심 대학의 두 컴퓨터 과학 강좌에서 모집된 총 19명의 학생이 참여했음: 초급 프로그래밍(CS1) 과정 학생 9명과 고급 소프트웨어 공학(SWE) 과정 학생 10명. 모든 참가자는 브라우저 기반 AI 통합 IDE인 Replit 플랫폼을 사용하여 개인 예산 관리 웹 애플리케이션을 구축하는 개방형 과제를 수행."
  },
  {
    "objectID": "1022.html#francis-geng의-연구-1",
    "href": "1022.html#francis-geng의-연구-1",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Francis Geng의 연구",
    "text": "Francis Geng의 연구\n발견1: 학생들은 대부분의 시간을 AI가 만든 프로토타입을 테스트하는데 사용함.\n\nFigure: 학생들의 사용시간을 시각화한 도넛 차트"
  },
  {
    "objectID": "1022.html#francis-geng의-연구-2",
    "href": "1022.html#francis-geng의-연구-2",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Francis Geng의 연구",
    "text": "Francis Geng의 연구\n\n학생들이 가장 많이 한 활동은 프로토타입 상호작용임. (64%) 즉, “내가 만든 앱이 제대로 돌아가는가?” 확인하는데 쓰였음.\n두번째로 많이 한 행동은 프롬프트 작성 (21%):\n\n심지어 프롬프트를 작성한 이유 중 가장 많은것은 새기능 요청이 아니라 디버깅 요청임 (61%)1\n\n실제 코드를 짜거나 들여다보고 고치는데 쓴 시간은 거의 없었음. (7%)\n\n이마저도 90.37%는 단순 코드 해석에 투자하였으며,\n직접적인 코드 수정은 9.63%에 불과했음.2\n\n\n결국 AI를 이용하여, AI가 만든 버그를 고치는 일을 하는것에 더 많은 시간을 쓰는 셈, 한마디로 바이브코딩이 아니라 바이브디버깅당연한 이야기이긴한데, 바이브코딩 환경이 학습자와 코드를 멀어지게 만드는 효과가 있음"
  },
  {
    "objectID": "1022.html#francis-geng의-연구-3",
    "href": "1022.html#francis-geng의-연구-3",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Francis Geng의 연구",
    "text": "Francis Geng의 연구\n발견2: 초보자와 숙력자의 차이 (프로프트 작성 능력의 차이)\n\nFigure: 초보자의 숙련자의 프롬프트 차이"
  },
  {
    "objectID": "1022.html#왼쪽-길을-지지하는-사람들의-의견",
    "href": "1022.html#왼쪽-길을-지지하는-사람들의-의견",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "왼쪽 길을 지지하는 사람들의 의견",
    "text": "왼쪽 길을 지지하는 사람들의 의견\n\nAI시대 코딩에 필요한 역량을 요약하면 아래와 같음:\n\n테스트 & 디버깅\n풍부한 맥락의 프롬프팅: 기술적 정확성으로 문제를 설명하는 능력\n코드 이해력: AI 결과물을 이해하는 기술\n\n쉽게 말하면, 코딩 할 줄 알아야 한다는 의미."
  },
  {
    "objectID": "1022.html#데이터분석을-위한-파이썬-공부-gpt이전",
    "href": "1022.html#데이터분석을-위한-파이썬-공부-gpt이전",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "데이터분석을 위한 파이썬 공부 (GPT이전)",
    "text": "데이터분석을 위한 파이썬 공부 (GPT이전)\n파이썬\n\n기본문법: 파이썬 자료형, 조건문, 반복문, 함수\n고급문법: 클래스, 상속, 데코레이터, 클로저, 콘텍스트 매니저, ABC, 예외처리\n개발도구: 모듈, 패키지\n데이터과학: 넘파이, 판다스\n시각화: matplotlib, seaborn, plotly\n머신러닝/딥러닝: scikit-learn, torch, tensorflow, huggingface\n\n강의 소개\n\n파이썬 프로그래밍: https://guebin.github.io/PP2024/\n데이터 시각화: https://guebin.github.io/DV2023/\n딥러닝: https://guebin.github.io/DL2024/, https://guebin.github.io/MP2024/\n머신러닝: https://guebin.github.io/MP2023/"
  },
  {
    "objectID": "1022.html#실습",
    "href": "1022.html#실습",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "실습",
    "text": "실습"
  },
  {
    "objectID": "1022.html#reference",
    "href": "1022.html#reference",
    "title": "Chat GPT를 이용한 파이썬 실무",
    "section": "Reference",
    "text": "Reference\n\n\n\n\n[1] “Hidden figures.” https://www.disneyplus.com/en-kr/browse/entity-bd9d3f07-aefe-4e45-b421-ad2a745c3bb0; Disney+, 2017.\n\n\n[2] 김정옥 and 김영옥, “주산의 역사와 우리나라 학교 주산교육 동향,” East Asian Mathematical Journal, vol. 33, no. 4, pp. 453–465, 2017.\n\n\n[3] “Perplexity ask: A game-changing search tool powered by AI.” https://towardsai.net/p/l/perplexity-ask-a-game-changing-search-tool-powered-by-ai.\n\n\n[4] “Google introduces bard, an AI chatbot.” https://www.nytimes.com/2023/02/06/technology/google-bard-ai-chatbot.html.\n\n\n[5] “구글 AI챗봇 ‘바드’ 오답에 시총 126조원 증발.” https://www.seoul.co.kr/news/international/2023/02/10/20230210021001.\n\n\n[6] “자존심 구긴 구글…새로 내놓은 챗봇AI 기대 못 미쳐 주가 폭락.” https://www.chosun.com/economy/tech_it/2023/02/09/MWRHL6L67READLOMI2HWOVDRPA/.\n\n\n[7] “GPT-4.” https://en.wikipedia.org/wiki/GPT-4.\n\n\n[8] “Claude (language model).” https://en.wikipedia.org/wiki/Claude_(language_model).\n\n\n[9] “How cursor serves billions of AI code completions every day.” https://blog.bytebytego.com/p/how-cursor-serves-billions-of-ai.\n\n\n[10] “DeepSeek.” https://en.wikipedia.org/wiki/DeepSeek.\n\n\n[11] CNN, “Google launches gemini, its most-advanced AI model yet, as it races to compete with ChatGPT.”\n\n\n[12] RetroFuturista, “OpenAI unveils sora: A revolutionary AI that transforms text into video.” https://retrofuturista.com/openai-sora/.\n\n\n[13] Google DeepMind, “Gemini 2.5: Our newest gemini model with thinking.” https://blog.google/technology/google-deepmind/gemini-model-thinking-updates-march-2025/.\n\n\n[14] “GPT-4o.” https://en.wikipedia.org/wiki/GPT-4o.\n\n\n[15] “ChatGPT search.” https://en.wikipedia.org/wiki/ChatGPT_Search.\n\n\n[16] “OpenAI o1.” https://en.wikipedia.org/wiki/OpenAI_o1.\n\n\n[17] “Codeium introduces the windsurf editor, enabling developers to work with ‘AI flows’.” https://www.webwire.com/ViewPressRel.asp?aId=329485.\n\n\n[18] Anthropic, “Model context protocol (MCP) open-source release.” https://www.anthropic.com/news/model-context-protocol.\n\n\n[19] V. capitalist Marc Andreessen / Fortune, “Marc andreessen warns DeepSeek is ‘AI’s sputnik moment’,” Fortune, Jan. 2025.\n\n\n[20] D. Guo et al., “Deepseek-r1: Incentivizing reasoning capability in llms via reinforcement learning,” arXiv preprint arXiv:2501.12948, 2025.\n\n\n[21] DeepSeek, “DeepSeek-R1 (hugging face model hub).” https://huggingface.co/deepseek-ai/DeepSeek-R1.\n\n\n[22] K. Wiggers, “DeepSeek claims its ’reasoning’ model beats OpenAI’s o1 on certain benchmarks,” TechCrunch, Jan. 2025.\n\n\n[23] J. S. / Markets Insider, “Tech stock sell-off: Nvidia, microsoft, others hit by DeepSeek debut,” Markets Insider (Business Insider), Jan. 2025.\n\n\n[24] “NotebookLM.” https://en.wikipedia.org/wiki/NotebookLM.\n\n\n[25] 김민정, “‘챗GPT, 거짓말해서 안 써요’ 대학생 쓰는 ‘노트북LM’ 뭐길래.” 중앙일보 (요약 제공 via ZUM News), Jun. 10, 2025.\n\n\n[26] Anthropic, “Claude code research preview.” https://www.anthropic.com/news/claude-3-7-sonnet.\n\n\n[27] “Vibe coding.” https://en.wikipedia.org/wiki/Vibe_coding.\n\n\n[28] Anthropic, “Claude code: Deep coding at terminal velocity.” https://www.anthropic.com/claude-code.\n\n\n[29] “Google’s gemini CLI: What is it and why it matters?” Science Insight.\n\n\n[30] P. Team, “Introducing comet: Browse at the speed of thought.” https://www.perplexity.ai/hub/blog/introducing-comet.\n\n\n[31] J. 이종원 (Lee, “이종원의 디자인 인사이트.” https://idesignexp.com/main, 2025.\n\n\n[32] R. Sapkota, K. I. Roumeliotis, and M. Karkee, “Vibe coding vs. Agentic coding: Fundamentals and practical implications of agentic ai,” arXiv preprint arXiv:2505.19443, 2025.\n\n\n[33] F. Geng et al., “Exploring student-AI interactions in vibe coding,” arXiv preprint arXiv:2507.22614, 2025."
  }
]